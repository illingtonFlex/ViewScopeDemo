buildscript {
	ext {
		springBootVersion = '2.0.6.RELEASE'
	}

	repositories {
		jcenter()
		mavenCentral()
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
	}

	dependencies {
		classpath "io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE"
		classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
		classpath 'net.researchgate:gradle-release:2.8.0'
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'com.bmuschko:gradle-clover-plugin:2.2.0'
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'net.researchgate.release'
apply plugin: 'com.bmuschko.clover'

group = 'htlp.me.understand.jsf'
version = "${version}"
sourceCompatibility = 1.8

allprojects {
	apply plugin: 'idea'
	idea {
		module {
			inheritOutputDirs = false
			outputDir = file('build/classes/main')
			testOutputDir = file('build/classes/test')
		}
	}
	repositories {
		jcenter()
		mavenCentral()
	}
}

artifactory {
	contextUrl = "http://BOGUS"
	publish {
		repository {
			repoKey = 'gradle-dev-local'
			username = "FOOBAR"
			password = "BARFOOD"
			maven = true
		}
		defaults {
			publications('mavenJava')
			publishArtifacts = true
			publishPom = true
		}
	}
	resolve {
		repository {
			repoKey = 'gradle-dev'
			username = "INVALID"
			password = "NO"
			maven = true
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Finchley.SR2'
	}
}

afterReleaseBuild.dependsOn artifactoryPublish

repositories {
	mavenCentral()
}

release {
	pushReleaseVersionBranch = 'prepare_release'
}

dependencies {
	compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile "org.joinfaces:jsf-spring-boot-starter:3.2.6"
	compile group: 'org.joinfaces', name: 'primefaces-spring-boot-starter', version: '3.2.6'
	compile group: 'org.jboss.weld.servlet', name: 'weld-servlet-shaded', version: '3.0.4.Final'
	compile 'org.json:json:20180130'
	compileOnly('org.projectlombok:lombok')
	compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
	compile group: 'javax.mail', name: 'mail', version: '1.4.7'
	compile group: 'org.codehaus.janino', name: 'janino', version: '3.0.9'
	compile group: 'commons-io', name: 'commons-io', version: '2.6'

	compile group: 'org.apache.poi', name: 'poi', version: '3.17'

	compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.0.6.RELEASE'
	compile group: 'org.springframework.session', name: 'spring-session-hazelcast', version: '2.1.4.RELEASE'
	compile group: 'com.hazelcast', name: 'hazelcast', version: '3.11.2'
	compile group: 'com.hazelcast', name: 'hazelcast-hibernate52', version: '1.3.1'
	compile group: 'com.hazelcast', name: 'hazelcast-eureka-one', version: '1.1'

	compile('org.springframework.boot:spring-boot-starter-security')

	compile('org.springframework.boot:spring-boot-starter-jdbc')
	compile('com.ibm:jt400:5.3.0.9')

	compile group: 'javax.servlet', name: 'jstl', version: '1.2'

	testCompile "org.springframework.boot:spring-boot-starter-test"
	clover 'org.openclover:clover:4.2.1'
}

springBoot  {
	buildInfo()
}

bootJar {
	launchScript()
}

// Clover, FindBugs, and Checkstyle tasks ------------------------------------------------

def enableClover = 'false'
def includesList = ['**/*.java']

task audit(dependsOn: ['runClover', 'runCheckstyle', 'runFindbugs']) {
}

task runClover(dependsOn: ['cloverGenerateReport']) {
	doFirst {
		enableClover = 'true'
	}
}

clover {
	enabled = enableClover
	testIncludes = ['**/*Test.java', '**/*Spec.groovy']
	testExcludes = ['**/Mock*.java', 'org']
	excludes = ['org/**/*.java']
	includes = includesList
//    targetPercentage = '1%'

	// Closure based syntax for additionalSourceSets and
	// additionalTestSourceSets is also supported. Both
	// srcDirs and classesDir properties are required.
	// The syntax allows the following to occur as many times
	// as necessary to define each additional sourceSet.
	// From version 3.0.0 and later the configuration is
	// requiring the Gradle 4.0 outputDir for each language
	// in the sourceSet. If you have Java and Groovy sourceSets
	// you may need to specify each language in the sourceSet
	// separately.
	sourceSets {
		main {
			java {
				srcDirs = ['src/main/java']
			}
			resources {
				srcDirs = ['src/main/resources']
			}
		}
		test {
			java {
				srcDirs = ['src/test/java']
			}
			resources {
				srcDirs = ['src/test/resources', 'src/test/java', 'resources']
			}
		}
		integrationTest {
			java {
				compileClasspath += main.output + test.output
				runtimeClasspath += main.output + test.output
				srcDir file('src/integration/java')
			}
			resources.srcDir file('test/resources')
		}
	}

	compiler {
		encoding = 'UTF-8'

		// if the javac executable used by ant should be the same as the one used elsewhere.
		executable = file('/usr/local/java/jdk1.8.0_05')
		// used to add debug information for Spring applications
		debug = true
		additionalArgs = '-parameters'
	}

	contexts {
		statement {
			name = 'log'
			regexp = '^.*LOG\\..*'
		}

		method {
			name = 'main'
			regexp = 'public static void main\\(String args\\[\\]\\).*'
		}
		method {
			name = 'getters'
			regexp = 'public [^\\s]+ get[A-Z][^\\s]+\\(\\)'
			maxStatements = 1
		}
		method {
			name = 'setters'
			regexp = 'public void set[A-Z][^\\s]+\\(.+\\)'
			maxStatements = 1
		}
	}

	report {
		html = true
		pdf = true
		filter = 'log,main'

		// Support capturing test results from JUnix XML report
		testResultsDir = project.tasks.getByName('test').reports.junitXml.destination
		testResultsInclude = 'TEST-*.xml'

		// Clover report nested columns support
		columns {
			coveredMethods format: 'longbar', min: '75'
			coveredStatements format: '%'
			coveredBranches format: 'raw'
			totalPercentageCovered format: '%', scope: 'package'
		}

		// Clover history generation support
		// See Clover documentation for details of the values supported
		historical {
			enabled = true
			historyIncludes = 'clover-*.xml.gz'
			packageFilter = null
			from = null
			to = null

			added {
				range = 10
				interval = '3 weeks'
			}
			mover {
				threshold = 1
				range = 10
				interval = '3 weeks'
			}
			mover {
				threshold = 1
				range = 10
				interval = '3 months'
			}
			mover {
				threshold = 1
				range = 10
				interval = '1 year'
			}
		}
	}
}

task setupCheckstyle(dependsOn: 'setupIncludes') {
	doFirst {
		delete("$project.buildDir/reports/checkstyle")
	}
	apply plugin: 'checkstyle'

	checkstyle {
		toolVersion '7.8.1'

		ignoreFailures = true
		showViolations = true
		reportsDir = file("$project.buildDir/reports/checkstyle")
		configFile = rootProject.file('config/checkstyle/checkstyle.xml')
		checkstyleMain.include includesList
		checkstyleMain.excludes = ['**/*Test.java', '**/jaxb/*.java', '**/xsd/*.java', '**/org/**/*.java']
		checkstyleMain {
			source = 'src'
			logging.setLevel(LogLevel.LIFECYCLE)
		}
	}

	tasks.withType(Checkstyle) {
		reports {
			xml.enabled false
			html.enabled true
			html.stylesheet resources.text.fromFile('config/checkstyle/severity-sorted.xsl')
		}
	}

}

task runCheckstyle(dependsOn: ['setupCheckstyle', 'checkstyleMain']) {
	checkstyleMain.mustRunAfter setupCheckstyle
}

task setupFindbugs(dependsOn: 'setupIncludes') {
	doFirst {
		delete("$project.buildDir/reports/findbugs")
	}
	apply plugin: 'findbugs'

	findbugs {
		ignoreFailures = true
		findbugsTest.enabled = false
		sourceSets = [sourceSets.main]
		includes = includesList
		excludeFilter = file("config/findbugs/excludeFilter.xml")
		reportsDir = file("$project.buildDir/reports/findbugs")
		effort = "max"
	}

	tasks.withType(FindBugs) {
		reports {
			xml.enabled = false
			html.enabled = true
			html.stylesheet resources.text.fromFile('config/findbugs/color.xsl')
		}
	}
}

task runFindbugs(dependsOn: ['setupFindbugs', 'findbugsMain']) {
	findbugsMain.mustRunAfter setupFindbugs
}

task setupPmd(dependsOn: 'setupIncludes') {
	doFirst {
		delete("$project.buildDir/reports/pmd")
	}
	apply plugin: 'pmd'
	pmd {
		ignoreFailures = true
		pmdTest.enabled = false
		includes = includesList
		ruleSets = [
				'java-basic',
				'java-braces',
				'java-clone',
				'java-codesize',
				'java-comments',
				'java-controversial',
				'java-coupling',
				'java-design',
				'java-empty',
				'java-finalizers',
				'java-imports',
				'java-optimizations',
				'java-strictexception',
				'java-strings',
				'java-typeresolution',
				'java-unnecessary',
				'java-unusedcode'
		]
		reportsDir = file("$project.buildDir/reports/pmd")
	}

	tasks.withType(Pmd) {
		reports {
			xml.enabled = true
			html.enabled = true
		}
	}
}

task runPmd(dependsOn: ['setupPmd', 'pmdMain']) {
	pmdMain.mustRunAfter setupPmd
}

task setupIncludes {
	doFirst {
		if (commit) {
			includesList = gitShow(commit)
		} else if (diff) {
			includesList = gitDiff()
		}
		println 'setup includes: ' + includesList
	}
}

def commit = findProperty('commit')
def diff = findProperty('diff')

def gitShow(commit) {
	def branchout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'show', '--pretty=""', '--name-only', commit
		standardOutput = branchout
	}
	def list = branchout.toString().split()
	def validTypes = ['.java']
	def javalist = list.findAll { a ->
		validTypes.any { a.contains(it) }
	}
	def result = []
	javalist.each {
		result << it.replaceFirst("src/", "**/")
	}
	return result
}

def gitDiff() {
	def branchout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'diff', '--name-only'
		standardOutput = branchout
	}
	def list = branchout.toString().split()
	def validTypes = ['.java']
	def result = list.findAll { a ->
		validTypes.any { a.contains(it) }
	}
	return result
}